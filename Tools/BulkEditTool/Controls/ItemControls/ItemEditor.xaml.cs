using System.Collections.ObjectModel;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using BulkEditTool.Model;
using BulkEditTool.Model.Observables;
using Chaos.Extensions.Common;
using Chaos.Schemas.Aisling;
using Chaos.Schemas.Templates;
using MaterialDesignExtensions.Controls;

namespace BulkEditTool.Controls.ItemControls;

/// <summary>
///     Interaction logic for ItemEditor.xaml
/// </summary>
public sealed partial class ItemEditor
{
    private const string TEMP_PATH = "NEW.json";

    private static readonly List<string> ModifierProperties = new()
    {
        nameof(AttributesSchema.AtkSpeedPct),
        nameof(AttributesSchema.Ac),
        nameof(AttributesSchema.MagicResistance),
        nameof(AttributesSchema.Hit),
        nameof(AttributesSchema.Dmg),
        nameof(AttributesSchema.FlatSkillDamage),
        nameof(AttributesSchema.FlatSpellDamage),
        nameof(AttributesSchema.SkillDamagePct),
        nameof(AttributesSchema.SpellDamagePct),
        nameof(AttributesSchema.MaximumHp),
        nameof(AttributesSchema.MaximumMp),
        nameof(AttributesSchema.Str),
        nameof(AttributesSchema.Int),
        nameof(AttributesSchema.Wis),
        nameof(AttributesSchema.Con),
        nameof(AttributesSchema.Dex)
    };
    private static readonly List<string> PropertyOrder = new()
    {
        nameof(ItemTemplateSchema.TemplateKey),
        nameof(ItemTemplateSchema.Name),
        nameof(ItemTemplateSchema.PanelSprite),
        nameof(ItemTemplateSchema.DisplaySprite),
        nameof(ItemTemplateSchema.Color),
        nameof(ItemTemplateSchema.PantsColor),
        nameof(ItemTemplateSchema.MaxStacks),
        nameof(ItemTemplateSchema.AccountBound),
        nameof(ItemTemplateSchema.BuyCost),
        nameof(ItemTemplateSchema.SellValue),
        nameof(ItemTemplateSchema.Weight),
        nameof(ItemTemplateSchema.MaxDurability),
        nameof(ItemTemplateSchema.Class),
        nameof(ItemTemplateSchema.AdvClass),
        nameof(ItemTemplateSchema.Level),
        nameof(ItemTemplateSchema.RequiresMaster),
        nameof(AttributesSchema.AtkSpeedPct),
        nameof(AttributesSchema.Ac),
        nameof(AttributesSchema.MagicResistance),
        nameof(AttributesSchema.Hit),
        nameof(AttributesSchema.Dmg),
        nameof(AttributesSchema.FlatSkillDamage),
        nameof(AttributesSchema.FlatSpellDamage),
        nameof(AttributesSchema.SkillDamagePct),
        nameof(AttributesSchema.SpellDamagePct),
        nameof(AttributesSchema.MaximumHp),
        nameof(AttributesSchema.MaximumMp),
        nameof(AttributesSchema.Str),
        nameof(AttributesSchema.Int),
        nameof(AttributesSchema.Wis),
        nameof(AttributesSchema.Con),
        nameof(AttributesSchema.Dex),
        nameof(ItemTemplateSchema.CooldownMs),
        nameof(ItemTemplateSchema.EquipmentType),
        nameof(ItemTemplateSchema.Gender),
        nameof(ItemTemplateSchema.IsDyeable),
        nameof(ItemTemplateSchema.IsModifiable),
        nameof(ItemTemplateSchema.Category),
        nameof(ItemTemplateSchema.Description)
    };
    public ObservableCollection<ObservableListItem<ItemPropertyEditor>> ItemTemplates { get; }

    public ItemEditor()
    {
        ItemTemplates = new ObservableCollection<ObservableListItem<ItemPropertyEditor>>();

        InitializeComponent();
    }

    private async void AddButton_Click(object sender, RoutedEventArgs e)
    {
        var path = TEMP_PATH;
        var baseDir = JsonContext.ItemTemplates.Options.Directory;
        var fullBaseDir = Path.GetFullPath(baseDir);

        var result = await OpenDirectoryDialog.ShowDialogAsync(
            DialogHost,
            new OpenDirectoryDialogArguments { CurrentDirectory = fullBaseDir });

        if (result is null || result.Canceled)
            return;

        path = Path.Combine(result.Directory, path);
        //path = Path.GetRelativePath(Environment.CurrentDirectory, path);

        var template = new ItemTemplateSchema { TemplateKey = Path.GetFileNameWithoutExtension(TEMP_PATH) };
        var wrapper = new TraceWrapper<ItemTemplateSchema>(path, template);
        var editor = new ItemPropertyEditor(ItemTemplates, wrapper);

        var listItem = new ObservableListItem<ItemPropertyEditor>(editor)
        {
            Key = template.TemplateKey
        };

        ItemTemplates.Add(listItem);

        ItemTemplatesView.SelectedItem = listItem;
    }

    private void DataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
    {
        if (sender is null)
            return;

        var dataGrid = (DataGrid)sender;

        foreach (var column in dataGrid.Columns)
        {
            var index = PropertyOrder.IndexOf(column.Header.ToString()!);

            if (index == -1)
                continue;

            column.DisplayIndex = index;
        }
    }

    private void DataGrid_AutoGeneratingColumn(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        if (sender is null)
            return;

        var dataGrid = (DataGrid)sender;

        if (e.PropertyName.EqualsI(nameof(ItemTemplateSchema.Modifiers)))
        {
            e.Cancel = true;

            foreach (var propertyName in ModifierProperties)
            {
                var column = new DataGridTextColumn
                {
                    Header = propertyName,
                    Binding = new Binding($"{nameof(ItemTemplateSchema.Modifiers)}.{propertyName}")
                    {
                        ValidatesOnDataErrors = true
                    }
                };

                dataGrid.Columns.Add(column);
            }
        } else if (!PropertyOrder.ContainsI(e.PropertyName))
            e.Cancel = true;
    }

    private void ListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
        var selected = e.AddedItems.OfType<ObservableListItem<ItemPropertyEditor>>().FirstOrDefault();

        if (selected is null)
        {
            var listView = (ListView)sender;

            if (listView is { SelectedIndex: -1, Items.IsEmpty: false })
                listView.SelectedIndex = 0;

            return;
        }

        PropertyEditor.Children.Clear();
        PropertyEditor.Children.Add(selected.Control);
    }

    private async void ToggleGridViewBtn_OnClick(object sender, RoutedEventArgs e)
    {
        var button = (Button)sender;
        var buttonStr = button.Content.ToString()!;

        if (buttonStr.EqualsI("Grid View"))
        {
            var dataGrid = new DataGrid();
            dataGrid.AutoGeneratedColumns += DataGrid_AutoGeneratedColumns;
            dataGrid.AutoGeneratingColumn += DataGrid_AutoGeneratingColumn;

            await JsonContext.LoadingTask;

            var lcv = new ListCollectionView(JsonContext.ItemTemplates.ToList());
            dataGrid.ItemsSource = lcv;

            PropertyEditor.Children.Clear();
            PropertyEditor.Children.Add(dataGrid);
            ItemTemplatesView.Visibility = Visibility.Collapsed;
            button.Content = "List View";
        } else if (buttonStr.EqualsI("List View"))
        {
            PropertyEditor.Children.Clear();
            ItemTemplatesView.Visibility = Visibility.Visible;
            var index = ItemTemplatesView.SelectedIndex;
            ItemTemplatesView.SelectedIndex = -1;
            ItemTemplatesView.SelectedIndex = index;

            button.Content = "Grid View";
        }
    }

    private async void UserControl_Initialized(object sender, EventArgs e)
    {
        await JsonContext.LoadingTask;

        var objs = JsonContext.ItemTemplates.Objects.Select(
            wrapper =>
            {
                var editor = new ItemPropertyEditor(ItemTemplates, wrapper);

                var listItem = new ObservableListItem<ItemPropertyEditor>(editor)
                {
                    Key = wrapper.Obj.TemplateKey
                };

                return listItem;
            });

        ItemTemplates.AddRange(objs);
    }
}